<node>
	<!--
		org.ofono.cdma.MessageManager:

		Object path: [variable prefix]/{modem0,modem1,...}
	-->
	<interface name="org.ofono.cdma.MessageManager">

		<!--
			GetProperties:

			Returns properties for the manager object. See
			the properties section for available properties.

			Possible Errors: #org.ofono.Error.InvalidArguments
		-->
		<method name="GetProperties">
			<arg name="properties" direction="out" type="a{sv}" />
		</method>

		<!--
			GetMessages:

			Get an array of message object paths and properties
			that represents the currently pending messages.

			This method call should only be used once when an
			application starts up.  Further message additions
			and removal shall be monitored via MessageAdded and
			MessageRemoved signals.
		-->
		<method name="GetMessages">
			<arg name="messages" direction="out" type="a{oa{sv}}" />
		</method>

		<!--
			SetProperty:

			Changes the value of the specified property. Only
			properties that are listed as readwrite are
			changeable. On success a PropertyChanged signal
			will be emitted.

			Possible Errors: #org.ofono.Error.InvalidArguments
					 #org.ofono.Error.DoesNotExist
		-->
		<method name="SetProperty">
			<arg name="name" direction="in" type="s" />
			<arg name="value" direction="in" type="v" />
		</method>

		<!--
			SendMessage:

			The dictionary can contain the following keys:

			string "To" - Address of the receiver

			string "Text" - The text to send

			string "Priority" - The value can be one of:
				"normal",
				"interactive",
				"urgent",
				"emergency",

			TODO: Figure out where this is really needed

			string "Privacy" - The value can be one of:
				"not restricted",
				"restricted",
				"confidential",
				"secret"

			TODO: Figure out where this is really needed

			If the message could be queued successfully, this
			method returns an object path to the created Message
			object.
		-->
		<method name="SendMessage">
			<arg name="info" direction="in" type="a{sv}" />
			<arg name="message" direction="out" type="o" />
		</method>

		<!--
			PropertyChanged:

			This signal indicates a changed value of the given
			property.
		-->
		<signal name="PropertyChanged">
			<arg name="name" type="s" />
			<arg name="value" type="v" />
		</signal>

		<!--
			ImmediateMessage:

			New immediate SMS received. Info has Sender,
			LocalSentTime, SentTime, Priority, Privacy and
			CallbackNumber information.  Sender address is given
			in string format.  LocalSentTime and SentTime are
			given in string form using ISO8601 format.
		-->
		<signal name="ImmediateMessage">
			<arg name="message" type="s" />
			<arg name="info" type="a{sv}" />
		</signal>

		<!--
			IncomingMessage:

			New incoming text SMS received. Info has Sender,
			LocalSentTime, SentTime, Priority, Privacy, and
			CallbackNumber.
		-->
		<signal name="IncomingMessage">
			<arg name="message" type="s" />
			<arg name="info" type="a{sv}" />
		</signal>

		<!--
			MessageAdded:

			This signal is emitted whenever a new Message object
			has been created.
		-->
		<signal name="MessageAdded">
			<arg name="message" type="o" />
			<arg name="properties" type="a{sv}" />
		</signal>

		<!--
			MessageRemoved:

			This signal is emitted whenever a Message object
			has been removed, e.g. when it reaches a final state.
		-->
		<signal name="MessageRemoved">
			<arg name="message" type="o" />
		</signal>

		<!--
			UseDeliveryAcknowledgement:

			Request to be notified when the SMSC has delivered
			the message to the receiving user.  In effect this
			is the same as the GSM Status Report.
		-->
		<property name="UseDeliveryAcknowledgement" type="b" access="readwrite" />

		<!--
			UseUserAcknowledgement:

			Request to be notified when the receiving user has
			acknowledged the message.
		-->
		<property name="UseUserAcknowledgement" type="b" access="readwrite" />

		<!--
			UseReadAcknowledgement:

			Request to be notified when the receiving User has
			read the message.
		-->
		<property name="UseReadAcknowledgement" type="b" access="readwrite" />

		<!--
			CallbackNumber:

			The call back number for the user.  If the number is
			empty, then the optional field is not included
			in the encoded PDU.
		-->
		<property name="CallbackNumber" type="s" access="readwrite" />

	</interface>
</node>
